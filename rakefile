#!/bin/ruby
task :default => ["development:start"]

# --------------------------------------------------------------

namespace :setup do
  desc 'Setup everything.'
  task :bundle do
    # Install bundle
    begin
      sh 'gem install bundle'
    rescue
      puts "Error while installing bundle."
    end

    # Install gems
    begin
      sh 'bundle install'
    rescue
      puts "Error while installing gems."
    end

    puts "Use '$ rake' to start with development!"
  end

  desc 'Update gems.'
  task :update do
    begin
      sh 'bundle update'
    rescue
      puts "Error while installing update."
    end
  end
end

desc 'Default setup task'
task :setup do Rake::Task['setup:bundle'].execute end

# --------------------------------------------------------------

#  ----------- TEST MUST NEVER BE RUN IN PRODUCTION MODE -----------
begin 
  require 'rake/testtask'
  namespace :test do
    task :unit => :development do
      ruby 'test/unit/all.rb'
    end
  end

  desc 'Default test task. TEST MUST NEVER BE RUN IN PRODUCTION MODE'
  task :test do Rake::Task['test:unit'].execute end
rescue Exception => e
  puts " ** TEST ERROR ** " + e.message
end


# --------------------------------------------------------------

begin
  require 'yard'
  namespace :doc do
    YARD::Rake::YardocTask.new(:generate) do |t|
      t.files   = [ 'rb/**/*.rb', 'main.rb' ]
      t.options = ['-opublic/pages/doc', '--no-stats']
      
      t.after = Proc.new {
        Rake::Task['doc:stats'].execute
      }
    end
    
    desc "Shows stats for YARD Documentation including listing undocumented modules, classes, constants, and methods"
    task :stats do
      stats = YARD::CLI::Stats.new
      stats.files   = [ 'rb/**/*.rb', 'main.rb' ]
      stats.run('main.rb', 'rb/**/*.rb', '--list-undoc')
    end
  end

  desc 'Default doc task'
  task :doc do Rake::Task['doc:generate'].execute end
rescue Exception => e
  puts " ** YARD ERROR ** " + e.message
end

# --------------------------------------------------------------

namespace :neo4j do
  desc 'Start the Neo4j Server'
  task :start do
    sh 'neo4j start'
  end

  desc 'Stop the Neo4j Server'
  task :stop do
    sh 'neo4j stop'
  end
end

desc 'Default neo4j task'
task :neo4j do Rake::Task['neo4j:start'].execute end

# --------------------------------------------------------------

namespace :development do
  desc 'Quick dev start'
  task :start do
    begin
      sh 'neo4j start'
    rescue
    end
    sh 'rackup -E development -o 0.0.0.0'
  end
end

desc 'Default development task'
task :development do Rake::Task['development:start'].execute end

# --------------------------------------------------------------

namespace :production do
  desc 'Start the server'
  task :start do
    sh 'bundle exec rackup -E production -o 0.0.0.0'
  end
end

desc 'Default production task'
task :production do Rake::Task['production:start'].execute end

# --------------------------------------------------------------

namespace :heroku do
  desc 'Setup heroku toolbelt.'
  task :setup do
    sh "wget -qO- https://toolbelt.heroku.com/install-ubuntu.sh | sh"
  end

  desc 'Launch the server to an heroku app.'
  task :start do
    sh 'git push heroku HEAD:master --force'
  end

  desc 'Log heroku data and errors.'
  task :logs do
    sh 'heroku logs'
  end

end

desc 'Default heroku task'
task :heroku do Rake::Task['heroku:start'].execute end

# --------------------------------------------------------------

namespace :docker do
  
  namespace :progrezz do
    desc 'Setup progrezz docker image.'
    task :setup, [:linked, :command, :client_folder] do |t, args|
      Rake::Task['docker:progrezz:build'].execute

      links = ""
      args[:linked].to_s.split(" ").each { |l| links += " --link " + l + ":" + l }

      if args[:client_folder] != nil
        links += " -v " + args[:client_folder] + ":/usr/progrezz/public/pages/client "
      end

      sh "docker create -i -t -p 9292:9292 -h progrezz --name=progrezz_server" + links + " progrezz/server " + args[:command].to_s
    end
    
    desc 'Unsetup progrezz docker image.'
    task :unsetup do
      sh "docker stop progrezz_server"
      sh "docker rm progrezz_server"
      #sh "docker rmi progrezz/server"
    end
      
    desc 'Build (or rebuild) progrezz docker image.'
    task :build do
      sh "docker build -t progrezz/server ."
    end

    desc 'Start progrezz docker process in the background.'
    task :start, [:interactive] do |t, args|
      interactive = "-i" if args[:interactive] == "true"
      sh 'docker start ' + interactive.to_s + ' progrezz_server ' + args[:rake_task].to_s
    end
    
    desc 'Stop progrezz docker process.'
    task :stop do
      sh 'docker stop progrezz_server'
    end
  end
  
  desc 'Default progrezz docker task'
  task :progrezz do Rake::Task['docker:progrezz:start'].execute end
  
  namespace :neo4j do
    desc 'Setup neo4j docker image.'
    task :setup do
      sh "docker create -i -t --name neo4j tpires/neo4j" #  -d
    end
    
    desc 'Unsetup neo4j docker image.'
    task :unsetup do
      sh "docker rm neo4j"
    end
    
    desc 'Start the neo4j embedded server.'
    task :start do
      sh "docker start neo4j"
    end
    
    desc 'Stop the neo4j embded server.'
    task :stop do
      sh "docker stop neo4j"
    end
  end
  
  desc 'Default neo4j docker task'
  task :neo4j do Rake::Task['docker:neo4j:start'].execute end

  namespace :osrm do
    desc 'Setup osrm docker image.'
    task :setup do
      puts " ** INFO ** Remebemer to configure OSRM by checking https://registry.hub.docker.com/u/xcgd/osrm-backend/"
      sh "docker create -t -v ~/volumes/osrm/etc:/opt/osrm/etc -v ~/volumes/osrm/data:/opt/osrm/data -v ~/volumes/osrm/profiles:/opt/osrm/profiles --name osrm-data busybox:ubuntu-14.04"
      sh "docker create -p 9876:5000 --volumes-from=osrm-data --name=osrm_server xcgd/osrm-backend"
    end

    desc 'Unsetup osrm docker image.'
    task :unsetup do
      sh "docker rm osrm-data"
      sh "docker rm osrm_server"
    end

    desc 'Start the osrm embedded server.'
    task :start do
      sh "docker start osrm-data"
      sh "docker start osrm_server"
    end

    desc 'Stop the osrm embded server.'
    task :stop do
      sh "docker stop osrm_server"
      sh "docker start osrm-data"
    end
  end

  desc 'Default neo4j docker task'
  task :neo4j do Rake::Task['docker:neo4j:start'].execute end
end

desc 'Default docker task'
task :docker do Rake::Task['docker:progrezz'].execute end

